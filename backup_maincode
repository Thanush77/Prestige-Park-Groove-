import 'package:flutter/material.dart';
import 'dart:math' as math;
import 'package:path_provider/path_provider.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:flutter_pdfview/flutter_pdfview.dart';
import 'dart:io';
import 'package:flutter/services.dart';
import 'package:open_file/open_file.dart';
import 'package:excel/excel.dart' as xl;

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Prestige Park Groove',
      theme: ThemeData(
        useMaterial3: true,
        colorScheme: ColorScheme.fromSeed(
            seedColor: const Color.fromARGB(255, 33, 174, 184)),
      ),
      home: const LoginPage(),
    );
  }
}
class RegistrationPage extends StatefulWidget {
  const RegistrationPage({Key? key}) : super(key: key);

  @override
  State<RegistrationPage> createState() => _RegistrationPageState();
}

class _RegistrationPageState extends State<RegistrationPage> 
    with SingleTickerProviderStateMixin {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _usernameController = TextEditingController();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final TextEditingController _confirmPasswordController = TextEditingController();
  final TextEditingController _phoneController = TextEditingController();
  final TextEditingController _companyController = TextEditingController();
  final TextEditingController _designationController = TextEditingController();
  
  bool _acceptedTerms = false;
  bool _obscurePassword = true;
  bool _obscureConfirmPassword = true;
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;

  final _emailPattern = r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$';
  final _passwordPattern = r'^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$';
  final _phonePattern = r'^\d{10}$';

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 1000),
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _animationController, curve: Curves.easeIn),
    );
    _animationController.forward();
  }

  void _register() {
    if (_formKey.currentState!.validate() && _acceptedTerms) {
      // Show loading indicator
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (BuildContext context) {
          return const Center(
            child: CircularProgressIndicator(),
          );
        },
      );

      // Simulate API call
      Future.delayed(const Duration(seconds: 2), () {
        Navigator.pop(context); // Remove loading indicator
        
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(15),
              ),
              title: const Row(
                children: [
                  Icon(Icons.check_circle, color: Colors.green),
                  SizedBox(width: 10),
                  Text('Success'),
                ],
              ),
              content: const Text('Registration successful! Please login.'),
              actions: [
                TextButton(
                  child: const Text('OK'),
                  onPressed: () {
                    Navigator.pop(context);
                    Navigator.pop(context); // Return to login page
                  },
                ),
              ],
            );
          },
        );
      });
    } else if (!_acceptedTerms) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please accept the terms and conditions'),
          backgroundColor: Colors.red,
          behavior: SnackBarBehavior.floating,
        ),
      );
    }
  }

  Widget _buildInputField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isPassword = false,
    String? Function(String?)? validator,
    TextInputType keyboardType = TextInputType.text,
  }) {
    return AnimatedBuilder(
      animation: _fadeAnimation,
      builder: (context, child) {
        return Opacity(
          opacity: _fadeAnimation.value,
          child: Container(
            margin: const EdgeInsets.symmetric(vertical: 8),
            child: TextFormField(
              controller: controller,
              obscureText: isPassword ? _obscurePassword : false,
              keyboardType: keyboardType,
              decoration: InputDecoration(
                labelText: label,
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                  borderSide: const BorderSide(width: 2),
                ),
                enabledBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                  borderSide: BorderSide(color: Colors.grey.shade400),
                ),
                focusedBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                  borderSide: BorderSide(color: Colors.blue[800]!, width: 2),
                ),
                prefixIcon: Icon(icon, color: Colors.blue[800]),
                filled: true,
                fillColor: Colors.grey.shade50,
              ),
              validator: validator,
            ),
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [
              Colors.blue[900]!,
              Colors.blue[600]!,
            ],
          ),
        ),
        child: SafeArea(
          child: Center(
            child: SingleChildScrollView(
              padding: const EdgeInsets.all(16.0),
              child: FadeTransition(
                opacity: _fadeAnimation,
                child: Card(
                  elevation: 12,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(20),
                  ),
                  child: Padding(
                    padding: const EdgeInsets.all(24.0),
                    child: Form(
                      key: _formKey,
                      child: Column(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          // Logo and Header
                          Image.asset(
                            'assets/prestigelogo.png',
                            height: 100,
                            width: 100,
                          ),
                          const SizedBox(height: 20),
                          Text(
                            'Create Account',
                            style: TextStyle(
                              fontSize: 28,
                              fontWeight: FontWeight.bold,
                              color: Colors.blue[800],
                            ),
                          ),
                          const SizedBox(height: 30),

                          // Input Fields
                          _buildInputField(
                            controller: _usernameController,
                            label: 'Username',
                            icon: Icons.person,
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return 'Please enter a username';
                              }
                              if (value.length < 4) {
                                return 'Username must be at least 4 characters';
                              }
                              return null;
                            },
                          ),
                          _buildInputField(
                            controller: _emailController,
                            label: 'Email',
                            icon: Icons.email,
                            keyboardType: TextInputType.emailAddress,
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return 'Please enter an email';
                              }
                              if (!RegExp(_emailPattern).hasMatch(value)) {
                                return 'Please enter a valid email';
                              }
                              return null;
                            },
                          ),
                          _buildInputField(
                            controller: _companyController,
                            label: 'Company Name',
                            icon: Icons.business,
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return 'Please enter company name';
                              }
                              return null;
                            },
                          ),
                          _buildInputField(
                            controller: _designationController,
                            label: 'Designation',
                            icon: Icons.work,
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return 'Please enter designation';
                              }
                              return null;
                            },
                          ),
                          _buildInputField(
                            controller: _phoneController,
                            label: 'Phone Number',
                            icon: Icons.phone,
                            keyboardType: TextInputType.phone,
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return 'Please enter a phone number';
                              }
                              if (!RegExp(_phonePattern).hasMatch(value)) {
                                return 'Please enter a valid 10-digit number';
                              }
                              return null;
                            },
                          ),
                          _buildInputField(
                            controller: _passwordController,
                            label: 'Password',
                            icon: Icons.lock,
                            isPassword: true,
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return 'Please enter a password';
                              }
                              if (!RegExp(_passwordPattern).hasMatch(value)) {
                                return 'Password must be at least 8 characters';
                              }
                              return null;
                            },
                          ),
                          _buildInputField(
                            controller: _confirmPasswordController,
                            label: 'Confirm Password',
                            icon: Icons.lock_outline,
                            isPassword: true,
                            validator: (value) {
                              if (value != _passwordController.text) {
                                return 'Passwords do not match';
                              }
                              return null;
                            },
                          ),

                          // Terms and Conditions
                          CheckboxListTile(
                            title: const Text(
                              'I accept the terms and conditions',
                              style: TextStyle(fontSize: 14),
                            ),
                            value: _acceptedTerms,
                            onChanged: (bool? value) {
                              setState(() {
                                _acceptedTerms = value ?? false;
                              });
                            },
                            controlAffinity: ListTileControlAffinity.leading,
                            contentPadding: EdgeInsets.zero,
                          ),

                          const SizedBox(height: 20),

                          // Register Button
                          SizedBox(
                            width: double.infinity,
                            child: ElevatedButton(
                              onPressed: _register,
                              style: ElevatedButton.styleFrom(
                                padding: const EdgeInsets.symmetric(vertical: 16),
                                backgroundColor: Colors.blue[800],
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(12),
                                ),
                                elevation: 4,
                              ),
                              child: const Text(
                                'Register',
                                style: TextStyle(
                                  fontSize: 18,
                                  color: Colors.white,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                          ),

                          const SizedBox(height: 20),

                          // Login Link
                          TextButton(
                            onPressed: () => Navigator.pop(context),
                            child: const Text(
                              'Already have an account? Login',
                              style: TextStyle(
                                fontSize: 14,
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  @override
  void dispose() {
    _animationController.dispose();
    _usernameController.dispose();
    _emailController.dispose();
    _passwordController.dispose();
    _confirmPasswordController.dispose();
    _phoneController.dispose();
    _companyController.dispose();
    _designationController.dispose();
    super.dispose();
  }
}
class LoginPage extends StatefulWidget {
  const LoginPage({Key? key}) : super(key: key);

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final TextEditingController _usernameController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  bool _obscurePassword = true;

  Future<void> _openWebsite(String url) async {
    final Uri uri = Uri.parse(url);
    if (await canLaunchUrl(uri)) {
      await launchUrl(uri, mode: LaunchMode.externalApplication);
    } else {
      throw 'Could not open $url';
    }
  }

  void _login() {
    if (_usernameController.text == 'thanush' &&
        _passwordController.text == 'user') {
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (context) => const MyHomePage()),
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Invalid credentials'),
          backgroundColor: Colors.red,
          behavior: SnackBarBehavior.floating,
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: LayoutBuilder(
        builder: (context, constraints) {
          return Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  Colors.teal.shade700,
                  Colors.teal.shade300,
                ],
              ),
            ),
            child: Center(
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(24.0),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    // Logo Section with animation
                    AnimatedContainer(
                      duration: const Duration(seconds: 1),
                      child: Card(
                        elevation: 8,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(15),
                        ),
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            children: [
                              GestureDetector(
                                onTap: () => _openWebsite('https://www.prestigeconstructions.com'),
                                child: Image.asset(
                                  'assets/Prestige.jpeg',
                                  height: 80,
                                  fit: BoxFit.contain,
                                ),
                              ),
                              const SizedBox(height: 20),
                              Row(
                                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                children: [
                                  _buildLogoButton(
                                    'assets/IISC_logo.jpeg',
                                    'https://www.iisc.ac.in',
                                  ),
                                  _buildLogoButton(
                                    'assets/L&T.png',
                                    'https://www.larsentoubro.com',
                                  ),
                                ],
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(height: 30),

                    // Login Card
                    Container(
                      constraints: BoxConstraints(
                        maxWidth: math.min(constraints.maxWidth, 400),
                      ),
                      child: Card(
                        elevation: 12,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(20),
                        ),
                        child: Padding(
                          padding: const EdgeInsets.all(24.0),
                          child: Column(
                            children: [
                              const Text(
                                'Sustainable Infra Development',
                                style: TextStyle(
                                  fontSize: 24,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.teal,
                                ),
                                textAlign: TextAlign.center,
                              ),
                              const SizedBox(height: 8),
                              const Text(
                                'Icon Group Bangalore',
                                style: TextStyle(
                                  fontSize: 16,
                                  color: Colors.black54,
                                ),
                              ),
                              const SizedBox(height: 30),
                              _buildTextField(
                                controller: _usernameController,
                                label: 'Username',
                                icon: Icons.person,
                              ),
                              const SizedBox(height: 20),
                              _buildPasswordField(),
                              const SizedBox(height: 30),
                              _buildLoginButton(),
                              const SizedBox(height: 20),
                              _buildSignUpButton(context),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          );
        },
      ),
    );
  }

  Widget _buildLogoButton(String asset, String url) {
    return Material(
      elevation: 4,
      borderRadius: BorderRadius.circular(10),
      child: InkWell(
        onTap: () => _openWebsite(url),
        borderRadius: BorderRadius.circular(10),
        child: Padding(
          padding: const EdgeInsets.all(8.0),
          child: Image.asset(asset, height: 60, fit: BoxFit.contain),
        ),
      ),
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
  }) {
    return TextField(
      controller: controller,
      decoration: InputDecoration(
        labelText: label,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
        ),
        prefixIcon: Icon(icon, color: Colors.teal),
        filled: true,
        fillColor: Colors.grey.shade50,
      ),
    );
  }

  Widget _buildPasswordField() {
    return TextField(
      controller: _passwordController,
      obscureText: _obscurePassword,
      decoration: InputDecoration(
        labelText: 'Password',
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
        ),
        prefixIcon: const Icon(Icons.lock, color: Colors.teal),
        suffixIcon: IconButton(
          icon: Icon(
            _obscurePassword ? Icons.visibility : Icons.visibility_off,
            color: Colors.teal,
          ),
          onPressed: () => setState(() => _obscurePassword = !_obscurePassword),
        ),
        filled: true,
        fillColor: Colors.grey.shade50,
      ),
    );
  }

  Widget _buildLoginButton() {
    return SizedBox(
      width: double.infinity,
      child: ElevatedButton(
        onPressed: _login,
        style: ElevatedButton.styleFrom(
          padding: const EdgeInsets.symmetric(vertical: 16),
          backgroundColor: Colors.teal,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          elevation: 4,
        ),
        child: const Text(
          'Login',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
            color: Colors.white,
          ),
        ),
      ),
    );
  }

  Widget _buildSignUpButton(BuildContext context) {
    return TextButton(
      onPressed: () {
        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => const RegistrationPage()),
        );
      },
      style: TextButton.styleFrom(
        padding: const EdgeInsets.symmetric(vertical: 8),
      ),
      child: const Text(
        'Not yet registered? Sign up now',
        style: TextStyle(
          fontSize: 14,
          color: Colors.teal,
          fontWeight: FontWeight.w500,
        ),
      ),
    );
  }
}
class MyHomePage extends StatelessWidget {
  const MyHomePage({super.key});

  // Function to open URLs in the default browser
  Future<void> _openWebsite(String url) async {
    final Uri uri = Uri.parse(url);
    if (await canLaunchUrl(uri)) {
      await launchUrl(uri, mode: LaunchMode.externalApplication);
    } else {
      throw 'Could not launch $url';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Prestige Park Grove'),
        backgroundColor: Colors.teal,
        foregroundColor: Colors.white,
      ),
      drawer: const CustomDrawer(),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Colors.teal.shade50, Colors.white],
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              // Header Card
              Card(
                elevation: 5,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(15),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    children: [
                      const Text(
                        'Sustainable Infrastructure Development',
                        style: TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                          color: Colors.teal,
                        ),
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 10),
                      const Text(
                        'A joint initiative for sustainable construction',
                        style: TextStyle(
                          fontSize: 16,
                          color: Colors.grey,
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 20),

              // Partner Logos
              Card(
                elevation: 5,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(15),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    children: [
                      const Text(
                        'Our Partners',
                        style: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Colors.teal,
                        ),
                      ),
                      const SizedBox(height: 16),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        children: [
                          _buildPartnerLogo(
                            'assets/Prestige.jpeg',
                            'https://www.prestigeconstructions.com',
                          ),
                          _buildPartnerLogo(
                            'assets/iisclogo.png',
                            'https://www.iisc.ac.in',
                          ),
                          _buildPartnerLogo(
                            'assets/L&T.png',
                            'https://www.larsentoubro.com',
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
              const Spacer(),

              // Project Button
              SizedBox(
                width: double.infinity,
                height: 60,
                child: ElevatedButton(
                  onPressed: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => const ApprovalsPage(),
                      ),
                    );
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.teal,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(15),
                    ),
                    elevation: 5,
                  ),
                  child: const Text(
                    'View Project Details',
                    style: TextStyle(
                      fontSize: 20,
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 20),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildPartnerLogo(String assetPath, String url) {
    return InkWell(
      onTap: () => _openWebsite(url),
      child: Container(
        padding: const EdgeInsets.all(8),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(10),
          boxShadow: [
            BoxShadow(
              color: Colors.grey.withOpacity(0.3),
              spreadRadius: 1,
              blurRadius: 5,
              offset: const Offset(0, 3),
            ),
          ],
        ),
        child: Image.asset(
          assetPath,
          width: 80,
          height: 80,
          fit: BoxFit.contain,
        ),
      ),
    );
  }
}
class CustomDrawer extends StatefulWidget {
  const CustomDrawer({super.key});

  @override
  State<CustomDrawer> createState() => _CustomDrawerState();
}

class _CustomDrawerState extends State<CustomDrawer> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  bool _isEnvironmentalExpanded = false;
  bool _isWasteManagementExpanded = false;
  bool _isGroundWaterExpanded = false;
  
  Future<void> _launchURL(String urlString) async {
    final Uri url = Uri.parse(urlString);
    if (await canLaunchUrl(url)) {
      await launchUrl(url, mode: LaunchMode.externalApplication);
    } else {
      throw 'Could not launch $url';
    }
  }

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Drawer(
      elevation: 16.0,
      child: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [
              Colors.blue[900]!,
              Colors.blue[700]!,
            ],
          ),
        ),
        child: SafeArea(
          child: Column(
            children: [
              // Header Section with Glassmorphism effect
              Container(
                padding: const EdgeInsets.all(16.0),
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(16),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.1),
                      blurRadius: 10,
                      spreadRadius: 1,
                    ),
                  ],
                ),
                child: Column(
                  children: [
                    // Profile Section
                    GestureDetector(
                      onTap: () => _launchURL('https://www.example.com'),
                      child: Hero(
                        tag: 'logo',
                        child: Container(
                          padding: const EdgeInsets.all(4),
                          decoration: BoxDecoration(
                            shape: BoxShape.circle,
                            border: Border.all(color: Colors.white, width: 2),
                          ),
                          child: CircleAvatar(
                            radius: 40,
                            backgroundColor: Colors.white,
                            child: Image.asset(
                              'assets/Prestige.jpeg',
                              fit: BoxFit.contain,
                            ),
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(height: 16),
                    // User Info
                    const Text(
                      'Sustainable Infra Development',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    // Location with icon
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        const Icon(Icons.location_on, color: Colors.white70, size: 16),
                        const SizedBox(width: 4),
                        Text(
                          'Bangalore 560001',
                          style: TextStyle(
                            color: Colors.white.withOpacity(0.7),
                            fontSize: 14,
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),

              // Menu Items
              Expanded(
                child: ListView(
                  padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),
                  children: [
                    _buildAnimatedDrawerItem(
                      title: 'Home',
                      icon: Icons.home_rounded,
                      onTap: () => Navigator.pushReplacement(
                        context,
                        MaterialPageRoute(builder: (context) => const MyHomePage()),
                      ),
                    ),
                    _buildExpandableDrawerItem(
                      title: 'Environmental',
                      icon: Icons.eco_rounded,
                      children: [
                        _buildSubDrawerItem(
                          title: 'Air Pollution',
                          icon: Icons.air_rounded,
                          onTap: () => Navigator.push(
                            context,
                            MaterialPageRoute(builder: (context) => const AirPollutionPage()),
                          ),
                        ),
                        _buildSubDrawerItem(
                          title: 'Water Consumption',
                          icon: Icons.water_drop_rounded,
                          onTap: () => Navigator.push(
                            context,
                            MaterialPageRoute(builder: (context) => const WaterConsumptionPage()),
                          ),
                        ),
                        _buildSubDrawerItem(
                          title: 'Solid Waste',
                          icon: Icons.water_drop_rounded,
                          onTap: () => Navigator.push(
                            context,
                            MaterialPageRoute(builder: (context) => const SolidWastePage()),
                          ),
                        ),
                        _buildSubDrawerItem(
                          title: 'Rain Water',
                          icon: Icons.water_drop_rounded,
                          onTap: () => Navigator.push(
                            context,
                            MaterialPageRoute(builder: (context) => RainWaterPage()),
                          ),
                        ),
                        _buildSubDrawerItem(                       
 
                          title: 'Ground Water',
                          icon: Icons.water_drop_rounded,
                          onTap: () => Navigator.push(
                            context,
                            MaterialPageRoute(builder: (context) => GroundWaterPage()),
                          ),
                        ),
                      ],
                    ),
                    _buildAnimatedDrawerItem(
                      title: 'Approvals',
                      icon: Icons.approval_rounded,
                      onTap: () => Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => const ApprovalsPage()),
                      ),
                    ),
                    _buildAnimatedDrawerItem(
                      title: 'Contact us',
                      icon: Icons.approval_rounded,
                      onTap: () => Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => const BlankPage()),
                      ),
                    ),
                    const Divider(color: Colors.white24),
                    _buildAnimatedDrawerItem(
                      title: 'Settings',
                      icon: Icons.settings_rounded,                          
                      onTap: () {},
                    ),
                    _buildAnimatedDrawerItem(
                      title: 'Logout',
                      icon: Icons.logout_rounded,
                      onTap: () => Navigator.pushReplacement(
                        context,
                        MaterialPageRoute(builder: (context) => const LoginPage()),
                      ),
                      color: Colors.red[300]!,
                    ),
                  ],
                ),
              ),

              // Footer
              Padding(
                padding: const EdgeInsets.all(8.0),
                child: Text(
                  'Version 1.0.0',
                  style: TextStyle(
                    color: Colors.white.withOpacity(0.5),
                    fontSize: 12,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildAnimatedDrawerItem({
    required String title,
    required IconData icon,
    required VoidCallback onTap,
    Color color = Colors.white,
  }) {
    return ListTile(
      leading: Icon(icon, color: color),
      title: Text(title, style: TextStyle(color: color, fontSize: 16)),
      onTap: onTap,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
      hoverColor: Colors.white.withOpacity(0.1),
      contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
    );
  }

  Widget _buildExpandableDrawerItem({
    required String title,
    required IconData icon,
    required List<Widget> children,
  }) {
    return ExpansionTile(
      leading: Icon(icon, color: Colors.white),
      title: Text(title, style: const TextStyle(color: Colors.white, fontSize: 16)),
      iconColor: Colors.white,
      collapsedIconColor: Colors.white,
      children: children,
      backgroundColor: Colors.white.withOpacity(0.1),
      collapsedBackgroundColor: Colors.transparent,
    );
  }

  Widget _buildSubDrawerItem({
    required String title,
    required IconData icon,
    required VoidCallback onTap,
  }) {
    return ListTile(
      leading: Icon(icon, color: Colors.white70, size: 20),
      title: Text(
        title,
        style: const TextStyle(color: Colors.white70, fontSize: 14),
      ),
      onTap: onTap,
      contentPadding: const EdgeInsets.only(left: 32, right: 16),
      dense: true,
    );
  }
}

class ApprovalsPage extends StatelessWidget {
  const ApprovalsPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Project Approvals',
            style: TextStyle(fontWeight: FontWeight.bold)),
        backgroundColor: Colors.teal,
        elevation: 0,
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Colors.teal.shade50, Colors.white],
          ),
        ),
        child: ListView(
          padding: const EdgeInsets.all(16.0),
          children: [
            // Header Card
            Card(
              elevation: 5,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(15),
              ),
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  children: [
                    const Icon(
                      Icons.approval_rounded,
                      size: 48,
                      color: Colors.teal,
                    ),
                    const SizedBox(height: 8),
                    const Text(
                      'Project Approvals & Documentation',
                      style: TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: Colors.teal,
                      ),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'Access all project-related approvals and documentation',
                      style: TextStyle(
                        fontSize: 16,
                        color: Colors.grey[600],
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 20),

            // Approval Buttons Grid
            GridView.count(
              crossAxisCount: 2,
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              mainAxisSpacing: 12,
              crossAxisSpacing: 12,
              children: [
                _buildApprovalCard(
                  context: context,
                  title: 'KSPCB',
                  icon: Icons.eco,
                  color: Colors.green,
                  assetPath: 'assets/cfe1.pdf',
                ),
                _buildApprovalCard(
                  context: context,
                  title: 'Environmental Clearances',
                  icon: Icons.nature_people,
                  color: Colors.blue,
                  assetPath: 'assets/ENvironmental.pdf',
                ),
                _buildApprovalCard(
                  context: context,
                  title: 'BBMP Plan Sanction',
                  icon: Icons.architecture,
                  color: Colors.orange,
                  assetPath: 'assets/Conversion Certificate.pdf',
                ),
                _buildApprovalCard(
                  context: context,
                  title: 'Land Document',
                  icon: Icons.landscape,
                  color: Colors.brown,
                  assetPath: 'assets/Conversion Certificate.pdf',
                ),
                _buildApprovalCard(
                  context: context,
                  title: 'SGWA',
                  icon: Icons.water_drop,
                  color: Colors.blue,
                  assetPath: 'assets/SGWA.pdf',
                ),
                _buildApprovalCard(
                  context: context,
                  title: 'Fire NOC',
                  icon: Icons.local_fire_department,
                  color: Colors.red,
                  assetPath: 'assets/FIRE_NOC.pdf',
                ),
                _buildApprovalCard(
                  context: context,
                  title: 'Airport Clearance',
                  icon: Icons.flight_takeoff,
                  color: Colors.indigo,
                  assetPath: 'assets/Airport.pdf',
                ),
                _buildApprovalCard(
                  context: context,
                  title: 'BESCOM Clearances',
                  icon: Icons.electric_bolt,
                  color: Colors.amber,
                  assetPath: 'assets/BESCOM.pdf',
                ),
                _buildApprovalCard(
                  context: context,
                  title: 'Land Conversion',
                  icon: Icons.transform,
                  color: Colors.purple,
                  assetPath: 'assets/Conversion Certificate.pdf',
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildApprovalCard({
    required BuildContext context,
    required String title,
    required IconData icon,
    required Color color,
    required String assetPath,
  }) {
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(15),
      ),
      child: InkWell(
        onTap: () => _handlePDFOpen(context, title, assetPath),
        borderRadius: BorderRadius.circular(15),
        child: Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(15),
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                color.withOpacity(0.7),
                color.withOpacity(0.4),
              ],
            ),
          ),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                icon,
                size: 40,
                color: Colors.white,
              ),
              const SizedBox(height: 8),
              Text(
                title,
                style: const TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }

  Future<void> _handlePDFOpen(
      BuildContext context, String title, String assetPath) async {
    try {
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (BuildContext context) {
          return const Center(
            child: CircularProgressIndicator(),
          );
        },
      );

      final dir = await getApplicationDocumentsDirectory();
      final filename = assetPath.split('/').last;
      final file = File('${dir.path}/$filename');

      if (!file.existsSync()) {
        final byteData = await rootBundle.load(assetPath);
        final bytes = byteData.buffer.asUint8List();
        await file.writeAsBytes(bytes);
      }

      if (context.mounted) Navigator.pop(context);

      if (context.mounted) {
        showModalBottomSheet(
          context: context,
          shape: const RoundedRectangleBorder(
            borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
          ),
          builder: (BuildContext context) {
            return Container(
              padding: const EdgeInsets.all(20),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    'Open $title',
                    style: const TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 20),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      _buildOpenButton(
                        icon: Icons.open_in_browser,
                        label: 'View in App',
                        onTap: () {
                          Navigator.pop(context);
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (context) => PDFViewPage(
                                filePath: file.path,
                                title: title,
                              ),
                            ),
                          );
                        },
                      ),
                      _buildOpenButton(
                        icon: Icons.open_in_new,
                        label: 'External App',
                        onTap: () async {
                          Navigator.pop(context);
                          await OpenFile.open(file.path);
                        },
                      ),
                    ],
                  ),
                ],
              ),
            );
          },
        );
      }
    } catch (e) {
      if (context.mounted) Navigator.pop(context);
      if (context.mounted) {
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              title: const Text('Error'),
              content: Text('Failed to load PDF: $e'),
              actions: [
                TextButton(
                  child: const Text('OK'),
                  onPressed: () => Navigator.pop(context),
                ),
              ],
            );
          },
        );
      }
    }
  }

  Widget _buildOpenButton({
    required IconData icon,
    required String label,
    required VoidCallback onTap,
  }) {
    return InkWell(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 24),
        decoration: BoxDecoration(
          color: Colors.teal,
          borderRadius: BorderRadius.circular(10),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(icon, color: Colors.white),
            const SizedBox(height: 8),
            Text(
              label,
              style: const TextStyle(color: Colors.white),
            ),
          ],
        ),
      ),
    );
  }
}

class PDFViewPage extends StatelessWidget {
  final String filePath;
  final String title;

  const PDFViewPage({
    super.key,
    required this.filePath,
    required this.title,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(title),
      ),
      body: PDFView(
        filePath: filePath,
        enableSwipe: true,
        swipeHorizontal: false,
        autoSpacing: true,
        pageSnap: true,
        onError: (error) {
          if (context.mounted) {
            showDialog(
              context: context,
              builder: (BuildContext context) {
                return AlertDialog(
                  title: const Text('Error'),
                  content: Text('Failed to load PDF: $error'),
                  actions: [
                    TextButton(
                      child: const Text('OK'),
                      onPressed: () => Navigator.pop(context),
                    ),
                  ],
                );
              },
            );
          }
        },
      ),
    );
  }

}
class RainWaterPage extends StatefulWidget {
  const RainWaterPage({super.key});

  @override
  _RainWaterPageState createState() => _RainWaterPageState();
}

class _RainWaterPageState extends State<RainWaterPage> {
  String _searchQuery = '';
  int _selectedTabIndex = 0;

  final List<Map<String, dynamic>> _harvestingData = [
    {
      'title': 'Collection Pit 1',
      'capacity': '5000L',
      'status': 'Active',
      'lastInspected': '2023-12-01',
      'details': 'Main collection point near Block A'
    },
    {
      'title': 'Storage Tank 1', 
      'capacity': '10000L',
      'status': 'Active',
      'lastInspected': '2023-12-05',
      'details': 'Underground storage tank'
    },
    {
      'title': 'Filter System',
      'capacity': 'N/A',
      'status': 'Maintenance',
      'lastInspected': '2023-11-28',
      'details': 'Primary filtration system'
    }
  ];

  final List<Map<String, String>> _monthlyData = [
    {
      'month': 'January 2024',
      'rainfall': '45mm',
      'collected': '35000L',
      'efficiency': '78%'
    },
    {
      'month': 'December 2023',
      'rainfall': '62mm',
      'collected': '48000L',
      'efficiency': '82%'
    },
    {
      'month': 'November 2023',
      'rainfall': '85mm',
      'collected': '65000L',
      'efficiency': '85%'
    }
  ];

  List<Map<String, dynamic>> get _filteredHarvestingData {
    return _harvestingData.where((data) =>
      data['title'].toLowerCase().contains(_searchQuery.toLowerCase()) ||
      data['status'].toLowerCase().contains(_searchQuery.toLowerCase())
    ).toList();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Rain Water Harvesting'),
        backgroundColor: Colors.blue[800],
        elevation: 0,
      ),
      body: Column(
        children: [
          // Search Bar
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: TextField(
              onChanged: (value) => setState(() => _searchQuery = value),
              decoration: InputDecoration(
                hintText: 'Search harvesting systems...',
                prefixIcon: const Icon(Icons.search),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
                filled: true,
                fillColor: Colors.grey[100],
              ),
            ),
          ),

          // Tab Bar
          Container(
            color: Colors.blue[800],
            child: TabBar(
              onTap: (index) => setState(() => _selectedTabIndex = index),
              tabs: const [
                Tab(text: 'Overview'),
                Tab(text: 'Monthly Data'),
                Tab(text: 'Analytics'),
              ],
            ),
          ),

          // Tab Content
          Expanded(
            child: IndexedStack(
              index: _selectedTabIndex,
              children: [
                _buildOverviewTab(),
                _buildMonthlyDataTab(),
                _buildAnalyticsTab(),
              ],
            ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _showAddDialog,
        child: const Icon(Icons.add),
        backgroundColor: Colors.blue[800],
      ),
    );
  }

  Widget _buildOverviewTab() {
    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: _filteredHarvestingData.length,
      itemBuilder: (context, index) {
        final data = _filteredHarvestingData[index];
        return Card(
          elevation: 4,
          margin: const EdgeInsets.only(bottom: 16),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          child: ExpansionTile(
            title: Text(
              data['title'],
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
            subtitle: Text('Status: ${data['status']}'),
            leading: Icon(
              Icons.water_drop,
              color: data['status'] == 'Active' ? Colors.blue : Colors.grey,
            ),
            children: [
              Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildDetailRow('Capacity', data['capacity']),
                    _buildDetailRow('Last Inspected', data['lastInspected']),
                    _buildDetailRow('Details', data['details']),
                  ],
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildMonthlyDataTab() {
    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: _monthlyData.length,
      itemBuilder: (context, index) {
        final data = _monthlyData[index];
        return Card(
          elevation: 4,
          margin: const EdgeInsets.only(bottom: 16),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  data['month']!,
                  style: const TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const Divider(),
                _buildDetailRow('Rainfall', data['rainfall']!),
                _buildDetailRow('Water Collected', data['collected']!),
                _buildDetailRow('Collection Efficiency', data['efficiency']!),
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _buildAnalyticsTab() {
    return const Center(
      child: Text(
        'Analytics Coming Soon',
        style: TextStyle(fontSize: 20),
      ),
    );
  }

  Widget _buildDetailRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            label,
            style: TextStyle(
              color: Colors.grey[600],
              fontSize: 16,
            ),
          ),
          Text(
            value,
            style: const TextStyle(
              fontWeight: FontWeight.bold,
              fontSize: 16,
            ),
          ),
        ],
      ),
    );
  }

  void _showAddDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Add New Harvesting System'),
        content: const SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                decoration: InputDecoration(labelText: 'System Name'),
              ),
              TextField(
                decoration: InputDecoration(labelText: 'Capacity'),
              ),
              TextField(
                decoration: InputDecoration(labelText: 'Status'),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Add'),
          ),
        ],
      ),
    );
  }
}


class WaterConsumptionPage extends StatelessWidget {
  const WaterConsumptionPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Water Consumption'),
        backgroundColor: Colors.teal,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // Header Section
            Container(
              padding: const EdgeInsets.all(16.0),
              decoration: BoxDecoration(
                color: Colors.teal[50],
                borderRadius: BorderRadius.circular(8),
                boxShadow: [
                  BoxShadow(
                    color: Colors.grey.withOpacity(0.5),
                    spreadRadius: 2,
                    blurRadius: 5,
                    offset: const Offset(0, 3),
                  ),
                ],
              ),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: const [
                  Text(
                    'Water Consumption',
                    style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: Colors.teal,
                    ),
                    textAlign: TextAlign.center,
                  ),
                  SizedBox(height: 8),
                  Text(
                    'Track and manage water consumption efficiently',
                    style: TextStyle(
                      fontSize: 16,
                      color: Colors.black54,
                    ),
                    textAlign: TextAlign.center,
                  ),
                  SizedBox(height: 16),
                  Text(
                    'Efficient water management is crucial for sustainable development.',
                    style: TextStyle(
                      fontSize: 16,
                      color: Colors.black87,
                    ),
                    textAlign: TextAlign.center,
                  ),
                  SizedBox(height: 16),
                  Text(
                    'Track your water consumption regularly to ensure optimal usage.',
                    style: TextStyle(
                      fontSize: 16,
                      color: Colors.black87,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ],
              ),
            ),
            const SizedBox(height: 20),
            // Project Button
            ElevatedButton(
              onPressed: () => Navigator.push(
                context,
                MaterialPageRoute(
                    builder: (context) => const ProjectLabourColonyPage()),
              ),
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 16),
                backgroundColor: Colors.teal,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
              child: const Text(
                'Project Water Consumption',
                style: TextStyle(
                  fontSize: 18,
                  color: Colors.white,
                ),
              ),
            ),
            const SizedBox(height: 16),
            // Labour Colony Button
            ElevatedButton(
              onPressed: () {
                // Navigate to Labour Colony page when implemented
              },
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 16),
                backgroundColor: Colors.teal,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
              child: const Text(
                'Labour Colony Water Consumption',
                style: TextStyle(
                  fontSize: 18,
                  color: Colors.white,
                ),
              ),
            ),
            const SizedBox(height: 20),
            // Additional Info Section
            Expanded(
              child: Container(
                padding: const EdgeInsets.all(16.0),
                decoration: BoxDecoration(
                  color: Colors.teal[50],
                  borderRadius: BorderRadius.circular(8),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.grey.withOpacity(0.5),
                      spreadRadius: 2,
                      blurRadius: 5,
                      offset: const Offset(0, 3),
                    ),
                  ],
                ),
                child: const Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text(
                      'Details of Water consumption in Project and Labour Colony',
                      style: TextStyle(
                        fontSize: 18,
                        color: Colors.black87,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}


class BlankPage extends StatelessWidget {
  const BlankPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Blank Page'),
      ),
      body: const Center(
        child: Text('This is a blank page'),
      ),
    );
  }
}

class ProjectLabourColonyPage extends StatelessWidget {
  const ProjectLabourColonyPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Water Consumption'),
        backgroundColor: Colors.teal,
      ),
      body: ListView(
        padding: const EdgeInsets.all(16.0),
        children: [
          _buildFeatureButton(
            context,
            'Project',
            Icons.business,
            const ProjectOptionsPage(),
          ),
          _buildFeatureButton(
            context,
            'Labour Colony',
            Icons.people,
            const LabourColonyPage(),
          ),
        ],
      ),
    );
  }

  Widget _buildFeatureButton(
      BuildContext context, String title, IconData icon, Widget page) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: ElevatedButton.icon(
        icon: Icon(icon, size: 28),
        label: Text(title, style: const TextStyle(fontSize: 18)),
        style: ElevatedButton.styleFrom(
          padding: const EdgeInsets.all(16),
          backgroundColor: Colors.teal,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8),
          ),
        ),
        onPressed: () => Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => page),
        ),
      ),
    );
  }
}

class ProjectOptionsPage extends StatelessWidget {
  const ProjectOptionsPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Project Options'),
        backgroundColor: Colors.teal,
      ),
      body: ListView(
        padding: const EdgeInsets.all(16.0),
        children: [
          _buildFeatureButton(
            context,
            'Source of Water',
            Icons.water,
            const SourcePage(),
          ),
          _buildFeatureButton(
            context,
            'Consumption of Water',
            Icons.bar_chart,
            const ConsumptionPage(),
          ),
          _buildFeatureButton(
            context,
            'Sewage Water',
            Icons.water_damage,
            const SewagePage(),
          ),
        ],
      ),
    );
  }

  Widget _buildFeatureButton(
      BuildContext context, String title, IconData icon, Widget page) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: ElevatedButton.icon(
        icon: Icon(icon, size: 28),
        label: Text(title, style: const TextStyle(fontSize: 18)),
        style: ElevatedButton.styleFrom(
          padding: const EdgeInsets.all(16),
          backgroundColor: Colors.teal,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8),
          ),
        ),
        onPressed: () => Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => page),
        ),
      ),
    );
  }
}

class SourcePage extends StatelessWidget {
  const SourcePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Source of Water'),
        backgroundColor: Colors.teal,
      ),
      body: ListView(
        padding: const EdgeInsets.all(16.0),
        children: [
          _buildFeatureButton(
            context,
            'Borewell',
            Icons.local_drink,
            const ExcelViewPage(excelPath: 'assets/Borewell_water.xlsx'),
          ),
          _buildFeatureButton(
            context,
            'BWSSB',
            Icons.water,
            const SourceDetailsPage(source: 'BWSSB'),
          ),
           _buildFeatureButton(
            context,
            'Borewell',
            Icons.local_drink,
            const ExcelViewPage(excelPath: 'assets/Borewell_water.xlsx'),
          ),
        ],
      ),
    );
  }

  Widget _buildFeatureButton(
      BuildContext context, String title, IconData icon, Widget page) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: ElevatedButton.icon(
        icon: Icon(icon, size: 28),
        label: Text(title, style: const TextStyle(fontSize: 18)),
        style: ElevatedButton.styleFrom(
          padding: const EdgeInsets.all(16),
          backgroundColor: Colors.teal,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8),
          ),
        ),
        onPressed: () => Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => page),
        ),
      ),
    );
  }
}

class SourceDetailsPage extends StatelessWidget {
  final String source;
  const SourceDetailsPage({super.key, required this.source});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(source),
        backgroundColor: Colors.teal,
      ),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(Icons.info, size: 100, color: Colors.teal),
              const SizedBox(height: 20),
              Text(
                'Details about $source',
                style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 20),
              Text(
                'Here you can add more detailed information about the water source.',
                style: const TextStyle(fontSize: 16),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }
}


class ConsumptionPage extends StatefulWidget {
  const ConsumptionPage({super.key});

  @override
  _ConsumptionPageState createState() => _ConsumptionPageState();
}
class _ConsumptionPageState extends State<ConsumptionPage> {
  final List<Map<String, String>> _data = [];
  DateTime? _selectedDate;
  String? _selectedSource;

  final _dateController = TextEditingController();
  final _sourceController = TextEditingController();
  final _consumptionController = TextEditingController();

  List<Map<String, String>> get filteredData {
    return _data.where((item) {
      if (_selectedDate != null) {
        String formattedDate = '${_selectedDate!.year}-${_selectedDate!.month.toString().padLeft(2, '0')}-${_selectedDate!.day.toString().padLeft(2, '0')}';
        if (item['date'] != formattedDate) return false;
      }

      if (_selectedSource != null && _selectedSource!.isNotEmpty) {
        if (item['source'] != _selectedSource) return false;
      }

      return true;
    }).toList();
  }

  Future<void> _selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate ?? DateTime.now(),
      firstDate: DateTime(2020),
      lastDate: DateTime(2025),
    );
    if (picked != null) {
      setState(() {
        _selectedDate = picked;
      });
    }
  }

  void _showAddDataDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Add New Entry'),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: _dateController,
                decoration: const InputDecoration(labelText: 'Date (YYYY-MM-DD)'),
              ),
              TextField(
                controller: _sourceController,
                decoration: const InputDecoration(labelText: 'Source'),
              ),
              TextField(
                controller: _consumptionController,
                decoration: const InputDecoration(labelText: 'Consumption (KLD)'),
                keyboardType: TextInputType.number,
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              setState(() {
                _data.add({
                  'date': _dateController.text,
                  'source': _sourceController.text,
                  'consumption': _consumptionController.text,
                });
              });
              Navigator.pop(context);
              // Clear controllers
              _dateController.clear();
              _sourceController.clear();
              _consumptionController.clear();
            },
            child: const Text('Add'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    Set<String> sources = _data.map((item) => item['source'] ?? '').toSet();

    return Scaffold(
      appBar: AppBar(
        title: const Text('Consumption Details'),
        actions: [
          IconButton(
            icon: const Icon(Icons.calendar_today),
            onPressed: () => _selectDate(context),
          ),
          IconButton(
            icon: const Icon(Icons.filter_list),
            onPressed: () {
              setState(() {
                _selectedDate = null;
                _selectedSource = null;
              });
            },
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _showAddDataDialog,
        child: const Icon(Icons.add),
      ),
      body: SingleChildScrollView(
        child: Column(
          children: [
            // Filter chips
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Wrap(
                spacing: 8.0,
                children: [
                  if (_selectedDate != null)
                    Chip(
                      label: Text(
                        'Date: ${_selectedDate!.year}-${_selectedDate!.month}-${_selectedDate!.day}',
                      ),
                      onDeleted: () => setState(() => _selectedDate = null),
                    ),
                  if (_selectedSource != null)
                    Chip(
                      label: Text('Source: $_selectedSource'),
                      onDeleted: () => setState(() => _selectedSource = null),
                    ),
                ],
              ),
            ),

            // Source filter dropdown
            if (sources.isNotEmpty)
              Padding(
                padding: const EdgeInsets.all(8.0),
                child: DropdownButton<String>(
                  hint: const Text('Filter by Source'),
                  value: _selectedSource,
                  items: sources.map((String source) {
                    return DropdownMenuItem<String>(
                      value: source,
                      child: Text(source),
                    );
                  }).toList(),
                  onChanged: (String? newValue) {
                    setState(() {
                      _selectedSource = newValue;
                    });
                  },
                ),
              ),

            // Data table
            SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: DataTable(
                columns: const [
                  DataColumn(label: Text('Date')),
                  DataColumn(label: Text('Source')),
                  DataColumn(label: Text('Consumption (KLD)')),
                ],
                rows: filteredData.map((item) => DataRow(
                  cells: [
                    DataCell(Text(item['date'] ?? '')),
                    DataCell(Text(item['source'] ?? '')),
                    DataCell(Text(item['consumption'] ?? '')),
                  ],
                )).toList(),
              ),
            ),
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    _dateController.dispose();
    _sourceController.dispose();
    _consumptionController.dispose();
    super.dispose();
  }
}

class SewagePage extends StatelessWidget {
  const SewagePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Sewage'),
      ),
      body: ListView(
        padding: const EdgeInsets.all(16.0),
        children: [
          ElevatedButton(
            onPressed: () {
              Navigator.push(context,
                  MaterialPageRoute(builder: (context) => const StpPage()));
            },
            child: const Text('STP'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.push(
                  context,
                  MaterialPageRoute(
                      builder: (context) => const LabourColonyPage()));
            },
            child: const Text('Labour Colony'),
          ),
        ],
      ),
    );
  }
}

class StpPage extends StatelessWidget {
  const StpPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('STP'),
      ),
      body: const Center(
          child: Text('Not Completed Project under Implementation')),
    );
  }
}

class ExcelViewPage extends StatefulWidget {
  final String excelPath;

  const ExcelViewPage({super.key, required this.excelPath});

  @override
  _ExcelViewPageState createState() => _ExcelViewPageState();
}

class _ExcelViewPageState extends State<ExcelViewPage> with SingleTickerProviderStateMixin {
  List<List<dynamic>>? _data;
  String? _error;
  List<String> _sheets = [];
  String? _selectedSheet;
  bool _isLoading = true;
  String _searchQuery = '';
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;
  
  // Sorting state
  int? _sortColumnIndex;
  bool _sortAscending = true;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 500),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _animationController, curve: Curves.easeIn),
    );
    _loadExcelData();
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  Future<void> _loadExcelData() async {
    try {
      setState(() {
        _isLoading = true;
        _error = null;
      });

      final ByteData data = await rootBundle.load(widget.excelPath);
      var bytes = data.buffer.asUint8List(data.offsetInBytes, data.lengthInBytes);
      var excel = xl.Excel.decodeBytes(bytes);

      _sheets = excel.tables.keys.toList();
      
      if (_sheets.isEmpty) {
        throw Exception('No sheets found in the Excel file');
      }

      _selectedSheet = _sheets.first;
      _loadSheetData(excel, _selectedSheet!);
      _animationController.forward();

    } catch (e) {
      setState(() {
        _error = 'Error loading Excel file: ${e.toString()}';
        _isLoading = false;
      });
    }
  }

  void _loadSheetData(xl.Excel excel, String sheetName) {
    try {
      var sheet = excel.tables[sheetName];
      if (sheet == null) throw Exception('Sheet not found');

      _data = sheet.rows.map((row) {
        return row.map((cell) => cell?.value ?? '').toList();
      }).toList();

      setState(() => _isLoading = false);
    } catch (e) {
      setState(() {
        _error = 'Error loading sheet data: ${e.toString()}';
        _isLoading = false;
      });
    }
  }

  List<List<dynamic>> _getFilteredData() {
    if (_data == null || _data!.isEmpty) return [];
    
    var filteredData = _data!.where((row) {
      if (row.isEmpty) return false;
      return row.any((cell) => 
        cell.toString().toLowerCase().contains(_searchQuery.toLowerCase()));
    }).toList();

    if (_sortColumnIndex != null && filteredData.length > 1) {
      filteredData.sublist(1).sort((a, b) {
        var aValue = a[_sortColumnIndex!];
        var bValue = b[_sortColumnIndex!];
        return _sortAscending ? 
          aValue.toString().compareTo(bValue.toString()) :
          bValue.toString().compareTo(aValue.toString());
      });
    }

    return filteredData;
  }

  @override
  Widget build(BuildContext context) {
    return Theme(
      data: Theme.of(context).copyWith(
        colorScheme: ColorScheme.fromSeed(
          seedColor: Colors.teal,
          brightness: Theme.of(context).brightness,
        ),
      ),
      child: Scaffold(
        appBar: _buildAppBar(),
        body: _buildBody(),
        floatingActionButton: _buildFAB(),
      ),
    );
  }

  PreferredSizeWidget _buildAppBar() {
    return AppBar(
      title: Text(_getFileName(),
        style: const TextStyle(fontWeight: FontWeight.bold)),
      elevation: 0,
      actions: [
        IconButton(
          icon: const Icon(Icons.search),
          onPressed: () => _showSearchDialog(),
        ),
        if (_sheets.length > 1)
          PopupMenuButton<String>(
            icon: const Icon(Icons.filter_list),
            onSelected: (String sheet) {
              setState(() {
                _selectedSheet = sheet;
                _isLoading = true;
              });
              _loadExcelData();
            },
            itemBuilder: (context) => _sheets.map((sheet) {
              return PopupMenuItem<String>(
                value: sheet,
                child: Text(sheet),
              );
            }).toList(),
          ),
      ],
    );
  }

  Widget _buildBody() {
    if (_isLoading) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const CircularProgressIndicator(),
            const SizedBox(height: 16),
            Text('Loading Excel data...',
              style: TextStyle(color: Colors.grey[600])),
          ],
        ),
      );
    }

    if (_error != null) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.error_outline, size: 48, color: Colors.red),
            const SizedBox(height: 16),
            Text(_error!, 
              textAlign: TextAlign.center,
              style: const TextStyle(color: Colors.red)),
            const SizedBox(height: 16),
            ElevatedButton.icon(
              onPressed: _loadExcelData,
              icon: const Icon(Icons.refresh),
              label: const Text('Retry'),
            ),
          ],
        ),
      );
    }

    var filteredData = _getFilteredData();
    if (filteredData.isEmpty) {
      return const Center(
        child: Text('No data available'),
      );
    }

    return Column(
      children: [
        if (_searchQuery.isNotEmpty)
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Chip(
              label: Text('Search: $_searchQuery'),
              onDeleted: () => setState(() => _searchQuery = ''),
            ),
          ),
        if (_selectedSheet != null)
          Container(
            padding: const EdgeInsets.all(8.0),
            color: Colors.teal.withOpacity(0.1),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const Icon(Icons.table_chart, size: 20),
                const SizedBox(width: 8),
                Text(
                  'Sheet: $_selectedSheet',
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          ),
        Expanded(
          child: FadeTransition(
            opacity: _fadeAnimation,
            child: SingleChildScrollView(
              scrollDirection: Axis.vertical,
              child: SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Card(
                  margin: const EdgeInsets.all(8.0),
                  elevation: 4,
                  child: DataTable(
                    headingRowColor: MaterialStateProperty.all(Colors.teal.shade50),
                    dataRowColor: MaterialStateProperty.resolveWith(
                      (states) => states.contains(MaterialState.selected)
                          ? Colors.teal.shade50
                          : Colors.white,
                    ),
                    columns: _buildColumns(filteredData),
                    rows: _buildRows(filteredData),
                    sortColumnIndex: _sortColumnIndex,
                    sortAscending: _sortAscending,
                  ),
                ),
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget? _buildFAB() {
    if (_data == null || _data!.isEmpty) return null;
    
    return FloatingActionButton(
      onPressed: _exportData,
      tooltip: 'Export Data',
      child: const Icon(Icons.download),
    );
  }

  List<DataColumn> _buildColumns(List<List<dynamic>> data) {
    if (data.isEmpty) return [];
    return List.generate(data[0].length, (index) {
      return DataColumn(
        label: Text(
          data[0][index].toString(),
          style: const TextStyle(fontWeight: FontWeight.bold),
        ),
        onSort: (columnIndex, ascending) {
          setState(() {
            _sortColumnIndex = columnIndex;
            _sortAscending = ascending;
          });
        },
      );
    });
  }

  List<DataRow> _buildRows(List<List<dynamic>> data) {
    if (data.length < 2) return [];
    return data.sublist(1).map((row) {
      return DataRow(
        cells: row.map((cell) {
          return DataCell(
            Text(cell.toString()),
            onTap: () => _showCellDetail(cell.toString()),
          );
        }).toList(),
      );
    }).toList();
  }

  void _showSearchDialog() {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text('Search Data'),
          content: TextField(
            onChanged: (value) => setState(() => _searchQuery = value),
            decoration: const InputDecoration(
              hintText: 'Enter search term...',
              prefixIcon: Icon(Icons.search),
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Cancel'),
            ),
            ElevatedButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Search'),
            ),
          ],
        );
      },
    );
  }

  void _showCellDetail(String content) {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text('Cell Content'),
          content: SingleChildScrollView(
            child: SelectableText(content),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Close'),
            ),
            TextButton(
              onPressed: () {
                Clipboard.setData(ClipboardData(text: content));
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Copied to clipboard')),
                );
              },
              child: const Text('Copy'),
            ),
          ],
        );
      },
    );
  }

  void _exportData() {
    // Add export functionality here
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Export feature coming soon!')),
    );
  }

  String _getFileName() {
    return widget.excelPath.split('/').last.replaceAll('.xlsx', '')
      .split('_').map((word) => 
        word[0].toUpperCase() + word.substring(1).toLowerCase())
      .join(' ');
  }
}
class LabourColonyPage extends StatefulWidget {
  const LabourColonyPage({super.key});

  @override
  State<LabourColonyPage> createState() => _LabourColonyPageState();
}

class _LabourColonyPageState extends State<LabourColonyPage> {
  final List<Map<String, String>> _data = [];
  DateTime? _selectedDate;
  
  // Controllers for text fields
  final _dateController = TextEditingController();
  final _sourceController = TextEditingController();
  final _consumptionController = TextEditingController();
  final _dischargeController = TextEditingController();
  final _dischargedToController = TextEditingController();
  final _modeController = TextEditingController();

  List<Map<String, String>> get filteredData {
    if (_selectedDate == null) return _data;
    return _data.where((item) => 
      item['date'] == '${_selectedDate!.year}-${_selectedDate!.month.toString().padLeft(2, '0')}-${_selectedDate!.day.toString().padLeft(2, '0')}'
    ).toList();
  }

  Future<void> _selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate ?? DateTime.now(),
      firstDate: DateTime(2020),
      lastDate: DateTime(2025),
    );
    if (picked != null) {
      setState(() {
        _selectedDate = picked;
      });
    }
  }

  void _showAddDataDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Add New Entry'),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: _dateController,
                decoration: const InputDecoration(labelText: 'Date (YYYY-MM-DD)'),
              ),
              TextField(
                controller: _sourceController,
                decoration: const InputDecoration(labelText: 'Source'),
              ),
              TextField(
                controller: _consumptionController,
                decoration: const InputDecoration(labelText: 'Consumption (KLD)'),
                keyboardType: TextInputType.number,
              ),
              TextField(
                controller: _dischargeController,
                decoration: const InputDecoration(labelText: 'Discharge'),
              ),
              TextField(
                controller: _dischargedToController,
                decoration: const InputDecoration(labelText: 'Discharged To'),
              ),
              TextField(
                controller: _modeController,
                decoration: const InputDecoration(labelText: 'Mode of Transport'),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              setState(() {
                _data.add({
                  'date': _dateController.text,
                  'source': _sourceController.text,
                  'consumption': _consumptionController.text,
                  'discharge': _dischargeController.text,
                  'dischargedTo': _dischargedToController.text,
                  'mode': _modeController.text,
                });
              });
              Navigator.pop(context);
              // Clear controllers
              _dateController.clear();
              _sourceController.clear();
              _consumptionController.clear();
              _dischargeController.clear();
              _dischargedToController.clear();
              _modeController.clear();
            },
            child: const Text('Add'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Labour Colony Consumption'),
        actions: [
          IconButton(
            icon: const Icon(Icons.calendar_today),
            onPressed: () => _selectDate(context),
          ),
          IconButton(
            icon: const Icon(Icons.filter_list),
            onPressed: () {
              setState(() {
                _selectedDate = null;
              });
            },
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _showAddDataDialog,
        child: const Icon(Icons.add),
      ),
      body: Column(
        children: [
          if (_selectedDate != null)
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Chip(
                label: Text(
                  'Filtered: ${_selectedDate!.year}-${_selectedDate!.month}-${_selectedDate!.day}',
                ),
                onDeleted: () => setState(() => _selectedDate = null),
              ),
            ),
          Expanded(
            child: SingleChildScrollView(
              scrollDirection: Axis.vertical,
              child: SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: DataTable(
                  headingRowColor: MaterialStateProperty.all(Colors.teal.shade50),
                  columns: const [
                    DataColumn(label: Text('Date')),
                    DataColumn(label: Text('Source')),
                    DataColumn(label: Text('Consumption (KLD)')),
                    DataColumn(label: Text('Discharge')),
                    DataColumn(label: Text('Discharged To')),
                    DataColumn(label: Text('Mode of Transport')),
                  ],
                  rows: filteredData.map((item) => DataRow(
                    cells: [
                      DataCell(Text(item['date'] ?? '')),
                      DataCell(Text(item['source'] ?? '')),
                      DataCell(Text(item['consumption'] ?? '')),
                      DataCell(Text(item['discharge'] ?? '')),
                      DataCell(Text(item['dischargedTo'] ?? '')),
                      DataCell(Text(item['mode'] ?? '')),
                    ],
                  )).toList(),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _dateController.dispose();
    _sourceController.dispose();
    _consumptionController.dispose();
    _dischargeController.dispose();
    _dischargedToController.dispose();
    _modeController.dispose();
    super.dispose();
  }
}
class AirPollutionPage extends StatelessWidget {
  const AirPollutionPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'Air Pollution Data',
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
        backgroundColor: Colors.teal,
        elevation: 0,
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Colors.teal.shade50, Colors.white],
          ),
        ),
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              // Title Card
              Card(
                elevation: 4,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(15),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(20),
                  child: Column(
                    children: [
                      const Icon(Icons.air, size: 40, color: Colors.teal),
                      const SizedBox(height: 12),
                      Text(
                        'Air Quality Monitoring',
                        style: TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                          color: Colors.teal.shade700,
                        ),
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 8),
                      const Text(
                        'Environmental Impact Assessment',
                        style: TextStyle(
                          fontSize: 16,
                          color: Colors.grey,
                        ),
                      ),
                    ],
                  ),
                ),
              ),

              const SizedBox(height: 24),

              // Info Cards in Grid
              GridView.count(
                crossAxisCount: 2,
                shrinkWrap: true,
                physics: const NeverScrollableScrollPhysics(),
                mainAxisSpacing: 12,
                crossAxisSpacing: 12,
                childAspectRatio: 1.1,
                children: [
                  _buildInfoCard('NMHC', 'Non-Methane Hydrocarbon', 'kPa'),
                  _buildInfoCard('NO2', 'Nitrogen Dioxide', 'µg/m³'),
                  _buildInfoCard('NOx', 'Oxides of Nitrogen', 'ppb'),
                  _buildInfoCard('O2', 'Oxygen', '%'),
                  _buildInfoCard('CO', 'Carbon Monoxide', 'mg/Nm³'),
                  _buildInfoCard('SO2', 'Sulphur Dioxide', 'ppb'),
                  _buildInfoCard('PM2.5', 'Fine Particulate Matter', 'µg/m³'),
                  _buildInfoCard('PM10', 'Coarse Particulate Matter', 'µg/m³'),
                ],
              ),

              const SizedBox(height: 24),

              // View Excel Button
              ElevatedButton.icon(
                icon: const Icon(Icons.table_chart, color: Colors.white),
                label: const Text(
                  'View Detailed Data',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.teal,
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                  elevation: 4,
                ),
                onPressed: () => Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => const ExcelViewPage(
                      excelPath: 'assets/Air_pollution.xlsx',
                    ),
                  ),
                ),
              ),

              const SizedBox(height: 24),

              // Footer Card
              Card(
                elevation: 2,
                color: Colors.teal.shade50,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
                child: const Padding(
                  padding: EdgeInsets.all(16),
                  child: Column(
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(Icons.update, size: 16, color: Colors.grey),
                          SizedBox(width: 8),
                          Text(
                            'Last Updated: Daily',
                            style: TextStyle(color: Colors.grey),
                          ),
                        ],
                      ),
                      SizedBox(height: 8),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(Icons.science, size: 16, color: Colors.grey),
                          SizedBox(width: 8),
                          Text(
                            'Source: Air Quality Monitoring Station',
                            style: TextStyle(color: Colors.grey),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildInfoCard(String title, String subtitle, String unit) {
    return Card(
      elevation: 3,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: Padding(
        padding: const EdgeInsets.all(12),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.cloud_outlined, size: 28, color: Colors.teal),
            const SizedBox(height: 8),
            Text(
              title,
              style: const TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 4),
            Text(
              subtitle,
              style: const TextStyle(
                fontSize: 11,
                color: Colors.grey,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 4),
            Text(
              'Unit: $unit',
              style: const TextStyle(
                fontSize: 11,
                color: Colors.grey,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class BorewellWaterPage extends StatelessWidget {
  const BorewellWaterPage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'Borewell Water Data',
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
        backgroundColor: Colors.teal,
        elevation: 0,
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Colors.teal.shade50, Colors.white],
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              // Title Card
              Card(
                elevation: 4,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(15),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(20),
                  child: Column(
                    children: [
                      const Icon(Icons.water_drop, size: 48, color: Colors.teal),
                      const SizedBox(height: 12),
                      Text(
                        'Borewell Water Consumption',
                        style: TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                          color: Colors.teal.shade700,
                        ),
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 8),
                      const Text(
                        'Monthly Data Analysis',
                        style: TextStyle(
                          fontSize: 16,
                          color: Colors.grey,
                        ),
                      ),
                    ],
                  ),
                ),
              ),

              const SizedBox(height: 24),

              // Info Card
              Card(
                elevation: 3,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
                child: const Padding(
                  padding: EdgeInsets.all(16),
                  child: Text(
                    'View and analyze detailed monthly borewell water consumption data',
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      fontSize: 16,
                      color: Colors.black87,
                    ),
                  ),
                ),
              ),

              const SizedBox(height: 24),

              // View Excel Button
              ElevatedButton.icon(
                icon: const Icon(Icons.table_chart, color: Colors.white),
                label: const Text(
                  'View Monthly Data',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.teal,
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                  elevation: 4,
                ),
                onPressed: () => Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => const ExcelViewPage(
                      excelPath: 'assets/Borewell_water.xlsx',
                    ),
                  ),
                ),
              ),

              const Spacer(),

              // Footer Card
              Card(
                elevation: 2,
                color: Colors.teal.shade50,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
                child: const Padding(
                  padding: EdgeInsets.all(16),
                  child: Column(
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(Icons.update, size: 16, color: Colors.grey),
                          SizedBox(width: 8),
                          Text(
                            'Last Updated: Monthly',
                            style: TextStyle(color: Colors.grey),
                          ),
                        ],
                      ),
                      SizedBox(height: 8),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(Icons.source, size: 16, color: Colors.grey),
                          SizedBox(width: 8),
                          Text(
                            'Data Source: Site Measurements',
                            style: TextStyle(color: Colors.grey),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


class SolidWastePage extends StatelessWidget {
  const SolidWastePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Solid Waste Management'),
        backgroundColor: Colors.teal,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // Header Card
            Card(
              elevation: 4,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              child: const Padding(
                padding: EdgeInsets.all(16.0),
                child: Column(
                  children: [
                    Icon(Icons.delete_outline, size: 48, color: Colors.teal),
                    SizedBox(height: 12),
                    Text(
                      'Solid Waste Management',
                      style: TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: Colors.teal,
                      ),
                      textAlign: TextAlign.center,
                    ),
                    SizedBox(height: 8),
                    Text(
                      'Track and manage waste disposal efficiently',
                      style: TextStyle(fontSize: 16, color: Colors.grey),
                      textAlign: TextAlign.center,
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 24),

            // Main Options
            _buildWasteButton(
              context: context,
              title: 'Construction & Demolition Waste',
              icon: Icons.construction,
              onTap: () => _navigateToWastePage(context, 'C&D'),
            ),
            
            const SizedBox(height: 12),
            
            _buildWasteButton(
              context: context,
              title: 'Municipal Solid Waste',
              icon: Icons.delete_outline,
              onTap: () => _navigateToWastePage(context, 'MSW'),
            ),

            const SizedBox(height: 24),

            // Statistics Card
            Card(
              elevation: 4,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'Waste Statistics',
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        color: Colors.teal,
                      ),
                    ),
                    const SizedBox(height: 16),
                    _buildStatisticRow('Total Waste Generated', '1200 kg'),
                    _buildStatisticRow('Waste Recycled', '800 kg'),
                    _buildStatisticRow('Waste to Landfill', '400 kg'),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildWasteButton({
    required BuildContext context,
    required String title,
    required IconData icon,
    required VoidCallback onTap,
  }) {
    return ElevatedButton.icon(
      onPressed: onTap,
      icon: Icon(icon, size: 24),
      label: Text(title),
      style: ElevatedButton.styleFrom(
        backgroundColor: Colors.teal,
        foregroundColor: Colors.white,
        padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 24),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
      ),
    );
  }

  Widget _buildStatisticRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(label, style: const TextStyle(fontSize: 16)),
          Text(
            value,
            style: const TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              color: Colors.teal,
            ),
          ),
        ],
      ),
    );
  }

  void _navigateToWastePage(BuildContext context, String type) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => WasteDetailsPage(wasteType: type),
      ),
    );
  }
}

class WasteDetailsPage extends StatelessWidget {
  final String wasteType;

  const WasteDetailsPage({super.key, required this.wasteType});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('$wasteType Waste Details'),
        backgroundColor: Colors.teal,
      ),
      body: const Center(
        child: Text('Waste details will be displayed here'),
      ),
    );
  }
}



// class RainWaterPage extends StatefulWidget {
//   @override
//   _RainWaterPageState createState() => _RainWaterPageState();
// }

// class _RainWaterPageState extends State<RainWaterPage> {
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         title: Text('Rain Water Harvesting'),
//       ),
//       body: Padding(
//         padding: const EdgeInsets.all(16.0),
//         child: Column(
//           crossAxisAlignment: CrossAxisAlignment.start,
//           children: [
//             Text(
//               'Rain Water Harvesting',
//               style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
//             ),
//             SizedBox(height: 16),
//             Text(
//               'Rainwater harvesting is the collection and storage of rain, rather than allowing it to run off.',
//               style: TextStyle(fontSize: 16),
//             ),
//             SizedBox(height: 16),
//             Icon(Icons.water_drop, size: 100, color: Colors.blue),
//             // Add more content and features here
//           ],
//         ),
//       ),
//     );
//   }
// }


class GroundWaterPage extends StatefulWidget {
  @override
  _GroundWaterPageState createState() => _GroundWaterPageState();
}

class _GroundWaterPageState extends State<GroundWaterPage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Ground Water Management'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Ground Water Management',
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 16),
            Text(
              'Effective management of groundwater resources is essential for sustainable water supply.',
              style: TextStyle(fontSize: 16),
            ),
            SizedBox(height: 16),
            Icon(Icons.opacity, size: 100, color: Colors.brown),
            // Add more content and features here
          ],
        ),
      ),
    );
  }
}